<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on RocWay的博客</title>
    <link>https://JackeyLee007.github.io/post/index.xml</link>
    <description>Recent content in Post-rsses on RocWay的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-zh</language>
    <copyright>© 2017 Copyright Text</copyright>
    <lastBuildDate>Fri, 30 Dec 2016 16:13:50 +0800</lastBuildDate>
    <atom:link href="https://JackeyLee007.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Corosync vs Heartbeat</title>
      <link>https://jackeylee007.github.io/2016/12/30/corosync_vs_heartbeat/</link>
      <pubDate>Fri, 30 Dec 2016 16:13:50 +0800</pubDate>
      
      <guid>https://jackeylee007.github.io/2016/12/30/corosync_vs_heartbeat/</guid>
      <description>

&lt;h2 id=&#34;corosync&#34;&gt;Corosync&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;Corosync是一个带有高可用功能的组间通信系统，用C语言实现，有四个主要功能：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一个封闭的进程组间通信模型，可以保证分布式状态机间的同步&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;一个简单的可用性管理器，用于重启失败的应用程序&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;一个基于内存的配置、统计数据库，可以读写数据、感知信息的变化&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;一个资源配额管理系统，当应用使用的资源已达到其配额，或配额被削减，可以通知应用&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;Corosync常备用作Apache Qpid和Pacemaker的高可用框架。&lt;/p&gt;

&lt;h2 id=&#34;heartbeat&#34;&gt;Heartbeat&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;Heartbeat是一个后台进程，可以为其客户端提供集群环境（通信和成员关系）。让处于不同机器的客户端知道彼此的存在（或是下线），以及交换数据。&lt;br /&gt;
&amp;emsp;&amp;emsp;Heartbeat应该与CRM（集群资源管理）系统结合在一起使用，后者可以起停集群中的各种资源，如IP地址、web服务等等，以保证系统的高可用。Pacemaker就是Heartbeat推荐的高可用框架。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zookeeper最有价值的三个特征</title>
      <link>https://jackeylee007.github.io/2016/12/30/zookeeper_valuable_feature/</link>
      <pubDate>Fri, 30 Dec 2016 14:22:21 +0800</pubDate>
      
      <guid>https://jackeylee007.github.io/2016/12/30/zookeeper_valuable_feature/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;感知变化&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;临时节点&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;保持一致&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;客户端可以感知znode的变化，包括节点的创建、删除、值的修改、子节点的变化，这使得zookeeper可以作为集群的动态服务配置中心。&lt;/p&gt;

&lt;p&gt;后台的服务可以将自己的连接信息创建为临时节点，这样在它下线时，节点也会随之删除。服务的使用方或调度者也就会知晓该服务已经不可用，要么换用其他服务，要么停止调用。这样做非常友好，也省去了对服务的检测。&lt;/p&gt;

&lt;p&gt;zookeeper集群有一种single system image特性，即各客户端看到的集群状态是一致的，包括节点、数据等。因此各个客户端可以据此进行同步。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>kafka的消息传递语义</title>
      <link>https://jackeylee007.github.io/2016/12/30/kafka_message_delivery_semantics/</link>
      <pubDate>Fri, 30 Dec 2016 12:16:08 +0800</pubDate>
      
      <guid>https://jackeylee007.github.io/2016/12/30/kafka_message_delivery_semantics/</guid>
      <description>

&lt;h2 id=&#34;对于producer&#34;&gt;对于Producer&lt;/h2&gt;

&lt;p&gt;对于Producer，Kafka从两个方面来保证消息的发送：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;设置消息发送失败后的重发次数，配置选项retries，范围是[0,&amp;hellip;,2147483647]，缺省值0&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;设置回执，配置选项 ack，范围是[-1, 0, 1]，缺省值1。-1表示所有的in-sync节点都已响应，0表示不必等待回执，1表示主节点（leader node）已响应。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，在broker始终有效的情况下，只要设置好重发次数，以及回执，就可以保证kafka已经接收到消息。&lt;/p&gt;

&lt;p&gt;注意，这里只是保证kafka能接收到消息（at-least-once），但没有保证只接受一次（exactly-once）。exactly-once需要设置消息的主键，并保证消息发送的冪等性（即便kafka重启后也能保证）。但这对一个分布式系统来讲并不容易，期待kafka能在未来的版本中实现。&lt;/p&gt;

&lt;h2 id=&#34;对于consumer&#34;&gt;对于Consumer&lt;/h2&gt;

&lt;p&gt;Consumer在实现时需要考虑宕机的情形，即程序重启时能够从上次失败的地方接着处理，而关键就是能够获知已处理的消息的offset。此时有三种选择：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;先保存消息的处理结果，再存offset&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;先存offset，再保存消息的处理结果&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;将offset保存在消息的处理结果中&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前面两种方法由于存在先后关系，因此可能存在不一致的情形。要么消息可能会多处理几次（at-least-once），要么可能会没有被处理（at-most-once）。&lt;br /&gt;
第三种方法则可以保证消息只被处理一次，即exactly-once。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HAProxy为何选择单进程</title>
      <link>https://jackeylee007.github.io/2016/12/23/haproxy_single_process/</link>
      <pubDate>Fri, 23 Dec 2016 12:19:10 +0800</pubDate>
      
      <guid>https://jackeylee007.github.io/2016/12/23/haproxy_single_process/</guid>
      <description>&lt;p&gt;首先澄清一下：HAProxy支持多进程，需要运行在daemon模式下，并设置global区的nbproc参数。缺省情况下，HAProxy只会启动一个进程。&lt;/p&gt;

&lt;p&gt;  尽管多进程可以提高CPU的利用率，但是仍然有一些限制需要考虑：&lt;br /&gt;
每个HAProxy进程都会对服务器执行健康检查，因此进程越多，服务器收到的打扰就越多。&lt;br /&gt;
最大连接数和最大队列数的设置是针对每个进程的，因此设置的时候要注意不要超过服务器的限制&lt;br /&gt;
外向连接应当避免使用端口范围，否则会引起冲突&lt;br /&gt;
每个进程都有一个定向表（stick-tables，即用户到服务器的映射关系），进程间并不共享&lt;br /&gt;
在每一时刻，每一个Peer组可能只能跑一个进程&lt;br /&gt;
HAProxy的CLI（命令行接口）操作只能作用于一个进程&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kafka是如何选择Leader的</title>
      <link>https://jackeylee007.github.io/2016/12/15/kafka_leader_election/</link>
      <pubDate>Thu, 15 Dec 2016 11:22:27 +0800</pubDate>
      
      <guid>https://jackeylee007.github.io/2016/12/15/kafka_leader_election/</guid>
      <description>

&lt;h2 id=&#34;kafka是如何选择leader的&#34;&gt;Kafka是如何选择Leader的&lt;/h2&gt;

&lt;h2 id=&#34;kafka的leader是什么&#34;&gt;Kafka的Leader是什么&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;首先Kafka会将接收到的消息分区（partition），每个主题（topic）的消息有不同的分区。这样一方面消息的存储就不会受到单一服务器存储空间大小的限制，另一方面消息的处理也可以在多个服务器上并行。&lt;br /&gt;
&amp;emsp;&amp;emsp;其次为了保证高可用，每个分区都会有一定数量的副本（replica）。这样如果有部分服务器不可用，副本所在的服务器就会接替上来，保证应用的持续性。&lt;br /&gt;
&lt;img src=&#34;http://kafka.apache.org/0101/images/log_anatomy.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&amp;emsp;&amp;emsp;但是，为了保证较高的处理效率，消息的读写都是在固定的一个副本上完成。这个副本就是所谓的Leader，而其他副本则是Follower。而Follower则会定期地到Leader上同步数据。&lt;/p&gt;

&lt;h2 id=&#34;leader选举&#34;&gt;Leader选举&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;如果某个分区所在的服务器除了问题，不可用，kafka会从该分区的其他的副本中选择一个作为新的Leader。之后所有的读写就会转移到这个新的Leader上。现在的问题是应当选择哪个作为新的Leader。显然，只有那些跟Leader保持同步的Follower才应该被选作新的Leader。&lt;br /&gt;
&amp;emsp;&amp;emsp;Kafka会在Zookeeper上针对每个Topic维护一个称为ISR（in-sync replica，已同步的副本）的集合，该集合中是一些分区的副本。只有当这些副本都跟Leader中的副本同步了之后，kafka才会认为消息已提交，并反馈给消息的生产者。如果这个集合有增减，kafka会更新zookeeper上的记录。&lt;br /&gt;
&amp;emsp;&amp;emsp;如果某个分区的Leader不可用，Kafka就会从ISR集合中选择&lt;strong&gt;&lt;em&gt;一个&lt;/em&gt;&lt;/strong&gt;副本作为新的Leader。&lt;br /&gt;
&amp;emsp;&amp;emsp;显然通过ISR，kafka需要的冗余度较低，可以容忍的失败数比较高。假设某个topic有f+1个副本，kafka可以容忍f个服务器不可用。&lt;/p&gt;

&lt;h2 id=&#34;为什么不用少数服从多数的方法&#34;&gt;为什么不用少数服从多数的方法&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;少数服从多数是一种比较常见的一致性算法和Leader选举法。它的含义是只有超过半数的副本同步了，系统才会认为数据已同步；选择Leader时也是从超过半数的同步的副本中选择。这种算法需要较高的冗余度。譬如只允许一台机器失败，需要有三个副本；而如果只容忍两台机器失败，则需要五个副本。而kafka的ISR集合方法，分别只需要两个和三个副本。&lt;/p&gt;

&lt;h2 id=&#34;如果所有的isr副本都失败了怎么办&#34;&gt;如果所有的ISR副本都失败了怎么办&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;此时有两种方法可选，一种是等待ISR集合中的副本复活，一种是选择任何一个立即可用的副本，而这个副本不一定是在ISR集合中。这两种方法各有利弊，实际生产中按需选择。&lt;br /&gt;
&amp;emsp;&amp;emsp;如果要等待ISR副本复活，虽然可以保证一致性，但可能需要很长时间。而如果选择立即可用的副本，则很可能该副本并不一致。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用Python开发Zeroc Ice应用</title>
      <link>https://jackeylee007.github.io/2016/12/10/zerocice/</link>
      <pubDate>Sat, 10 Dec 2016 17:13:36 +0800</pubDate>
      
      <guid>https://jackeylee007.github.io/2016/12/10/zerocice/</guid>
      <description>

&lt;h2 id=&#34;用python开发zeroc-ice应用&#34;&gt;用Python开发Zeroc Ice应用&lt;/h2&gt;

&lt;h2 id=&#34;zeroc-ice简介&#34;&gt;Zeroc Ice简介&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;Zeroc ICE（Internet Communications Engine ，互联网通信引擎）是目前功能比较强大和完善的RPC框架，支持跨平台、跨语言调用。它非常灵活，可以通过TCP、UDP、SSL/TSL或WebSocket连接，支持同步、异步调用，以及服务器和客户端之间的双向连接。Zeroc ICE的效率非常高，它使用一种高效的二进制协议，对带宽的消耗比较小。甚至对于通过卫星的RPC调用，Zeroc ICE还可以对数据流进一步压缩。另外Zeroc ICE还可以在不解包的情况下转发调用请求，省去普通转发时的解包、重新压包的时间。&lt;br /&gt;
&amp;emsp;&amp;emsp;Zeroc ICE的应用还可以部署在icegrid上，实现网格计算，即客户端调用时不必指定目标主机，由ICE负责查找；服务端也可以在调用时才开启，动态加载；同样的服务也可以部署多个，实现高可用。&lt;/p&gt;

&lt;h2 id=&#34;实验简介&#34;&gt;实验简介&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;Zeroc ICE支持跨语言RPC调用，包括C++、C#、Java、JavaScript、Python、Objective-C、Ruby、PHP、VB等。本次实验采用Python（Pyhon 2.7以上，或者Python 3都可以）。实验的内容是在icegrid上部署一个简单的服务器，当客户端调用时输出指定内容，并返回一个字符串。实验步骤如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安装Zeroc ICE&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;开发服务端和客户端程序&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;部署到icegrid&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;客户端调用&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;环境准备&#34;&gt;环境准备&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp; 本次实验采用的操作系统是Ubuntu 14.04。如果使用其他操作系统，可以根据&lt;a href=&#34;https://zeroc.com/distributions/ice&#34;&gt;Zeroc ICE&lt;/a&gt;的文档相应调整。&lt;/p&gt;

&lt;h3 id=&#34;安装zeroc-ice&#34;&gt;安装Zeroc Ice&lt;/h3&gt;

&lt;p&gt;&amp;emsp;&amp;emsp; 如果系统中没有安装Zeroc ICE，并且ubuntu的软件源中也没有zeroc ice，可以按照下面的步骤安装。&lt;br /&gt;
&amp;gt; sudo apt-key adv &amp;ndash;keyserver keyserver.ubuntu.com &amp;ndash;recv 5E6DA83306132997&lt;br /&gt;
&amp;gt; sudo apt-add-repository &amp;ldquo;deb &lt;a href=&#34;http://zeroc.com/download/apt/ubuntu$(lsb_release&#34;&gt;http://zeroc.com/download/apt/ubuntu$(lsb_release&lt;/a&gt; -rs) stable main&amp;rdquo;&lt;br /&gt;
&amp;gt; sudo apt-get update&lt;br /&gt;
&amp;gt; sudo apt-get install zeroc-ice-all-runtime zeroc-ice-all-dev&lt;/p&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;安装之后系统中就有了slice2cpp、slice2java等Sliece（Zeroc ICE定义的接口描述语言，IDL）文件到相应语言的转换程序，以及icegrid、iceregistry、icegridadmin等程序。如果缺少目标语言的工具（例如slice2py）或开发包，还需要特别安装。&lt;/p&gt;

&lt;h3 id=&#34;安装zeroc-ice的python开发包&#34;&gt;安装Zeroc ICE的python开发包&lt;/h3&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;当然在这一步之前应当首先安装python和pip（python的依赖管理工具），此处略。Zeroc ICE的python开发包（或者模块）叫zeroc-ice，可以使用pip安装。&lt;br /&gt;
&amp;gt; sudo -H pip install zeroc-ice&lt;/p&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;安装过程中可能出现缺少某些C/C++头文件的问题，例如缺少python.h、openssl/ssl.h、bzlib.h，这些都是因为没有安装相应的开发包。可以通过如下的命令解决：&lt;br /&gt;
&amp;gt; sudo apt-get install python-dev&lt;br /&gt;
&amp;gt; sudo apt-get install libssl-dev&lt;br /&gt;
&amp;gt; sudo apt-get install libbz2-dev&lt;/p&gt;

&lt;h2 id=&#34;开发server和client&#34;&gt;开发Server和Client&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;下面即是真正的服务端和客户端开发。开发过程通常是:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用Slice语言定义语言无关的接口文件&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;转换成指定语言的接口文件&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;根据接口文件开发服务端和客户端程序&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;书写服务端和客户端的配置文件&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;使用slice语言定义接口&#34;&gt;使用slice语言定义接口&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// Printer.ice
module Demo {
    interface Printer {
         string printString(string s);
    };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;生成指定语言的接口文件&#34;&gt;生成指定语言的接口文件&lt;/h3&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;本次开发采用的语言是python，所以使用&lt;br /&gt;
&amp;gt; slice2py Printer.ice&lt;/p&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;其他语言可以依此类推，例如slice2java，slice2cpp。&lt;br /&gt;
&amp;emsp;&amp;emsp;命令执行成功，可以看到在目标目录中生成了一个Printer_ice.py文件，以及一个Demo目录。Demo是slice接口文件中定义的module名称。&lt;/p&gt;

&lt;h3 id=&#34;编写服务器&#34;&gt;编写服务器&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys, traceback, Ice 
import Demo

# PrinterI是接口实现类，Demo.Printer是slice2py生成的接口
class PrinterI(Demo.Printer):
    def printString(self, s, current=None):
        print(s)
        return &amp;quot;Server Printed: &amp;quot; + s 

status = 0 
ic = None

try:
    # 初始化zeroc ice环境
    ic = Ice.initialize(sys.argv)
    # 生成名为SimplePrinterAdapter的对象适配器，连接方式是缺省的tcp，监听端口10000
    adapter = ic.createObjectAdapterWithEndpoints(&amp;quot;SimplePrinterAdapter&amp;quot;, &amp;quot;default -p 10000&amp;quot;)
    # 生成接口的实现对象，并以指定的名字SimplePrinter添加到对象适配器中
    object = PrinterI()
    adapter.add(object, ic.stringToIdentity(&amp;quot;SimplePrinter&amp;quot;))
    # 激活对象适配器
    adapter.activate()
    # 使得本服务器的调用线程在此暂停，直至ice服务结束，或者进程结束
    ic.waitForShutdown()
except:
    traceback.print_exc()
    status = 1 

if ic: 
    # Clean up
    try:
        ic.destroy()
    except:
        traceback.print_exc()
        status = 1 

sys.exit(status)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;server.cfg内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PrinterAdapter.AdapterId=PrinterAdapter
PrinterAdapter.Endpoints=tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;其中tcp的意思通过tcp协议调用，服务器监听来自tcp协议的连接请求。&lt;/p&gt;

&lt;h3 id=&#34;编写客户端&#34;&gt;编写客户端&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys, traceback, Ice 
import Demo

status = 0 
ic = None

try:
    ic = Ice.initialize(sys.argv)
    # 生成名为SimplePrinter代理对象，且通过tcp调用，连接目标机器的10000端口
    base = ic.stringToProxy(&amp;quot;SimplePrinter:default -p 10000&amp;quot;)
    # 将代理对象转换成目标对象
    printer = Demo.PrinterPrx.checkedCast(base)
    if not printer:
        raise RuntimeError(&amp;quot;Invalid proxy&amp;quot;)
    # 调用服务器的printString方法，并输出返回结果
    rs = printer.printString(&amp;quot;Hello World, I&#39;m talking to you through RPC&amp;quot;)
    print(rs)

except:
    traceback.print_exc()
    status = 1 

if ic: 
    # Clean up
    try:
        ic.destroy()
    except:
        traceback.print_exc()
        status = 1 

sys.exit(status)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;客户端的配置文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ice.Default.Locator=SzcIceGrid/Locator:tcp -h 127.0.0.1 -p 4061
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;其含义是使用本地（-h 127.0.0.1）上的名为SzcIceGrid的服务定位器，连接协议是tcp，端口4061。&lt;strong&gt;注意&lt;/strong&gt;：与注册中心的配置相对应。&lt;/p&gt;

&lt;h3 id=&#34;客户端直连服务端&#34;&gt;客户端直连服务端&lt;/h3&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;上述程序开发完毕之后不用部署到icegrid就可以直接运行，配置文件是用来在icegrid上定位和连接服务。此时可以一边运行服务端，一边运行客户端，检验一下它们的功能。&lt;br /&gt;
&amp;gt; python Server.py&lt;/p&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;运行之后可以看到进程并没有结束，一直在等待连接。然后另起一个终端，运行客户端程序。&lt;br /&gt;
&amp;gt; python Client.py&lt;/p&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;运行之后可以看到服务端和客户端窗口的输出。&lt;br /&gt;
&lt;img src=&#34;http://ohpg9orwb.bkt.clouddn.com/blogs/icegrid/client_to_server.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;部署到icegrid&#34;&gt;部署到icegrid&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;icegrid是Zeroc ICE的云计算解决方案。它可以将各种服务端部署在多台机器上，并为客户端调用提供服务定位、服务激活、负载均衡、故障转移等服务。客户端只要连接到指定的服务注册中心，就可以根据服务名称（这里是SimplePrinter），以及连接协议（Endpoints，这里是tcp）就可以找到相应的服务。服务在注册时也不必处在运行状态，可以由icegrid根据调用请求，自动启动。&lt;br /&gt;
&lt;img src=&#34;https://doc.zeroc.com/download/attachments/16716477/Simple_IceGrid_application.gif?version=1&amp;amp;modificationDate=1432840085000&amp;amp;api=v2&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;配置注册中心&#34;&gt;配置注册中心&lt;/h3&gt;

&lt;p&gt;registry.cfg（服务注册中心的配置文件）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IceGrid.InstanceName=SzcIceGrid  
#客户端连接到注册中心的地址  
IceGrid.Registry.Client.Endpoints=tcp   -p 4061
IceGrid.Registry.Server.Endpoints=tcp
IceGrid.Registry.Internal.Endpoints=tcp
IceGrid.Registry.PermissionsVerifier=SzcIceGrid/NullPermissionsVerifier
IceGrid.Registry.AdminPermissionsVerifier=SzcIceGrid/NullPermissionsVerifier
#注册中心数据保存路径,需要手动创建文件夹
IceGrid.Registry.Data=/home/rocway/test/zerocice/registry
IceGrid.Registry.DynamicRegistration=1
Ice.Admin.InstanceName=AdminInstance
Ice.Admin.ServerId=Admin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：手工创建文件中的路径。&lt;/p&gt;

&lt;h3 id=&#34;配置节点&#34;&gt;配置节点&lt;/h3&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;节点是服务所在的机器。在实际生产环境中，服务注册中心也可以运行在其中某个节点上。&lt;br /&gt;
node1.cfg（服务所在节点的配置文件）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 注册中心地址  
Ice.Default.Locator=SzcIceGrid/Locator:tcp -h 127.0.0.1 -p 4061  
#node名  
IceGrid.Node.Name=node1  
IceGrid.Node.Endpoints=tcp  
#node存储路径  
IceGrid.Node.Data=/home/rocway/test/zerocice/nodes/node1
IceGrid.Node.Output=/home/rocway/test/zerocice/nodes/node1
IceGrid.Node.CollocateRegistry=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：手工创建上述文件中提到的路径。其中服务端程序的输出会保存在Ouput指向路径的*.out文件中。&lt;/p&gt;

&lt;h3 id=&#34;应用描述文件&#34;&gt;应用描述文件&lt;/h3&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;应用描述文件用来描述服务端程序在icegrid中的部署情况。包括应用的名称、服务程序的路径、执行参数等等。&lt;br /&gt;
app.xml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;icegrid&amp;gt;
    &amp;lt;application name=&amp;quot;PrinterApplication&amp;quot;&amp;gt;
        &amp;lt;node name=&amp;quot;node1&amp;quot;&amp;gt;
            &amp;lt;server id=&amp;quot;PrinterServer&amp;quot; exe=&amp;quot;python&amp;quot; activation=&amp;quot;on-demand&amp;quot;&amp;gt;
                &amp;lt;adapter name=&amp;quot;PrinterAdapter&amp;quot; endpoints=&amp;quot;tcp -h 127.0.0.1&amp;quot;&amp;gt;
                    &amp;lt;object identity=&amp;quot;SimplePrinter&amp;quot; type=&amp;quot;::Demo::Printer&amp;quot; property=&amp;quot;Identity&amp;quot;/&amp;gt;
                &amp;lt;/adapter&amp;gt;
                &amp;lt;option&amp;gt;/home/rocway/test/zerocice/Server.py&amp;lt;/option&amp;gt;   
                &amp;lt;property name=&amp;quot;Ice.Trace.Network&amp;quot; value=&amp;quot;1&amp;quot;/&amp;gt;
                &amp;lt;properties&amp;gt;  
                    &amp;lt;property name=&amp;quot;Ice.ThreadPool.Server.SizeMax&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;  
                &amp;lt;/properties&amp;gt;  
                        &amp;lt;property name=&amp;quot;IceMX.Metrics.Debug.GroupBy&amp;quot; value=&amp;quot;id&amp;quot;/&amp;gt;
                        &amp;lt;property name=&amp;quot;IceMX.Metrics.Debug.Disabled&amp;quot; value=&amp;quot;1&amp;quot;/&amp;gt;
                        &amp;lt;property name=&amp;quot;IceMX.Metrics.ByParent.GroupBy&amp;quot; value=&amp;quot;parent&amp;quot;/&amp;gt;
                        &amp;lt;property name=&amp;quot;IceMX.Metrics.ByParent.Disabled&amp;quot; value=&amp;quot;1&amp;quot;/&amp;gt;     
            &amp;lt;/server&amp;gt;
        &amp;lt;/node&amp;gt;
    &amp;lt;/application&amp;gt;
&amp;lt;/icegrid&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;启动icegrid&#34;&gt;启动icegrid&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;启动icegrid注册中心&lt;br /&gt;
icegridregistry &amp;ndash;Ice.Config=registry.cfg&lt;br /&gt;
&lt;img src=&#34;http://ohpg9orwb.bkt.clouddn.com/blogs/icegrid/grid_start_registry.PNG&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;启动某个节点&lt;br /&gt;
icegridnode &amp;ndash;Ice.Config=node1.cfg&lt;br /&gt;
&lt;img src=&#34;http://ohpg9orwb.bkt.clouddn.com/blogs/icegrid/grid_start_node.PNG&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;启动节点上的应用管理程序, 并添加应用&lt;br /&gt;
icegridadmin &amp;ndash;Ice.Config=node1.cfg&lt;br /&gt;
application add app.xml&lt;br /&gt;
&lt;img src=&#34;http://ohpg9orwb.bkt.clouddn.com/blogs/icegrid/grid_admin_node.PNG&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;查看已经添加的应用&lt;br /&gt;
application describe PrinterApplication&lt;br /&gt;
&lt;img src=&#34;http://ohpg9orwb.bkt.clouddn.com/blogs/icegrid/grid_describe_application.PNG&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;启动各节点上的应用服务&lt;br /&gt;
icegridgui&lt;br /&gt;
&lt;img src=&#34;http://ohpg9orwb.bkt.clouddn.com/blogs/icegrid/connect_grid.PNG&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://ohpg9orwb.bkt.clouddn.com/blogs/icegrid/grid_start_server.PNG&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;运行客户端程序&lt;br /&gt;
python Client.py&lt;br /&gt;
&lt;img src=&#34;http://ohpg9orwb.bkt.clouddn.com/blogs/icegrid/grid_ClientRun_Server_Response.PNG&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
```&lt;/p&gt;

&lt;h2 id=&#34;实验总结&#34;&gt;实验总结&lt;/h2&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;此次实验实现了在icegrid上部署服务程序，客户端通过icegrid的服务注册中心调用该服务。实验中服务端和客户端使用的都是Python，有兴趣的同学也可以分别使用不同的语言开发服务端和客户端，尝试一下Zeroc ICE的跨语言RPC调用。&lt;br /&gt;
&amp;emsp;&amp;emsp;本次实验就到这里，有关Zeroc ICE的其他内容请关注后续的课程。&lt;/p&gt;

&lt;h2 id=&#34;版权声明&#34;&gt;版权声明&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;此课程内容由作者RocWay提供并授权使用，实验楼基于原著进行了内容和章节的优化，修正了一些错误。版权归原作者所有。未经允许，不得以任何形式进行传播和发布&lt;br /&gt;
{{ template &amp;ldquo;_internal/disqus.html&amp;rdquo; . }}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MQ vs RPC</title>
      <link>https://jackeylee007.github.io/2016/12/05/mqvsrpc/</link>
      <pubDate>Mon, 05 Dec 2016 16:29:06 +0800</pubDate>
      
      <guid>https://jackeylee007.github.io/2016/12/05/mqvsrpc/</guid>
      <description>

&lt;h1 id=&#34;mq-vs-rpc&#34;&gt;MQ vs RPC&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;消息队列和远程调用&lt;/p&gt;

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h2 id=&#34;架构模型&#34;&gt;架构模型&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://ohpg9orwb.bkt.clouddn.com/blogs/MQvsRPC/RPC.PNG&#34; alt=&#34;RPC&#34; /&gt;&lt;br /&gt;
RPC的特点是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;客户端&lt;strong&gt;&lt;em&gt;同步&lt;/em&gt;&lt;/strong&gt;调用服务器上的方法、过程&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;客户端的请求只能由&lt;strong&gt;&lt;em&gt;一个&lt;/em&gt;&lt;/strong&gt;服务器处理，虽然请求可以分发到不同的服务器，但一次只能由一个服务器处理&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;架构简单、明晰&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://ohpg9orwb.bkt.clouddn.com/blogs/MQvsRPC/MQ.PNG&#34; alt=&#34;MQ&#34; /&gt;&lt;br /&gt;
MQ的特点是:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;消息的发送者和消费者解耦，即消息的产生和处理是异步的&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;一条消息的消费者可以有多个&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;消息可以保存在MQ系统中，消费者可以重新消费&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;架构比RPC稍显复杂&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;适用场景&#34;&gt;适用场景&lt;/h2&gt;

&lt;h3 id=&#34;rpc比较适合&#34;&gt;RPC比较适合&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;- 客户端调用哪个服务器比较明确
- 调用需要立即得到返回结果
- 架构简单
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;在一个由多个微服务构成的大系统中，某些&lt;strong&gt;&lt;em&gt;关键&lt;/em&gt;&lt;/strong&gt;服务间的调用应当在较短的时间内返回，而且各个微服务的专业化程度较高，同一个请求的关注者只有一个。这个时候就应该用RPC。&lt;br /&gt;
&amp;emsp;&amp;emsp;比如在一个ERP系统中，有一个管理仓储的微服务，以及一个负责订单的微服务。新建订单时需要查知当前的存货是否充足，如果不充足就通知用户；提交订单时预订指定数量的货物，如果此时货物不错，也要终止订单的提交，并通知用户。显然在这种场景下是不允许较大的延迟，否则会影响用户体验。所以应该使用RPC，及时返回仓储情况。&lt;/p&gt;

&lt;h3 id=&#34;mq比较适合&#34;&gt;MQ比较适合&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;- 消息的发送者和消费者需要解耦的情况
    - 发送者并不明确谁是消费者
    - 发送者并不关心谁来消费消息
    - 各个消费者可以从不同的角度入手处理消息
    - 消费者的处理结果也不返回给发送者
- 消息的发送和处理是异步的
- 消息的关注者不止一个
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;在一个由多个微服务构成的大系统中，会有一些非关键服务，用来执行一些不需要立刻得到结果的计算。而且它们的计算结果并不会返回给消息的发送者。这个时候就应该使用MQ。&lt;br /&gt;
&amp;emsp;&amp;emsp;比如在一个ERP系统中有一些日志服务、业务监控服务等。这些服务会发布一些系统事件，针对这些事件可能有多个应用关注。对于日志服务，当系统出现某些异常情况时需要浏览日志，查找问题的根源；也可以在分析系统运行的瓶颈时提供关键数据。对于业务监控系统，例如货物入仓出仓的消息，可以被报表系统关注，生成报表；也可以被配货系统关注，及时补足所需库存。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>cassandra</title>
      <link>https://jackeylee007.github.io/2016/11/28/cassandra/</link>
      <pubDate>Mon, 28 Nov 2016 16:58:53 +0800</pubDate>
      
      <guid>https://jackeylee007.github.io/2016/11/28/cassandra/</guid>
      <description></description>
    </item>
    
    <item>
      <title>second</title>
      <link>https://jackeylee007.github.io/2016/11/28/second/</link>
      <pubDate>Mon, 28 Nov 2016 15:43:03 +0800</pubDate>
      
      <guid>https://jackeylee007.github.io/2016/11/28/second/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>