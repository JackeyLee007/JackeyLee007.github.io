<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>鲲鹏展翅</title>
    <link>https://JackeyLee007.github.io/tags/mq/index.xml</link>
    <description>Recent content on 鲲鹏展翅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <atom:link href="https://JackeyLee007.github.io/tags/mq/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>kafka的消息传递语义</title>
      <link>https://jackeylee007.github.io/post/kafka_Message_delivery_semantics/</link>
      <pubDate>Fri, 30 Dec 2016 12:16:08 +0800</pubDate>
      
      <guid>https://jackeylee007.github.io/post/kafka_Message_delivery_semantics/</guid>
      <description>

&lt;h2 id=&#34;对于producer&#34;&gt;对于Producer&lt;/h2&gt;

&lt;p&gt;对于Producer，Kafka从两个方面来保证消息的发送：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;设置消息发送失败后的重发次数，配置选项retries，范围是[0,&amp;hellip;,2147483647]，缺省值0&lt;/li&gt;
&lt;li&gt;设置回执，配置选项 ack，范围是[-1, 0, 1]，缺省值1。-1表示所有的in-sync节点都已响应，0表示不必等待回执，1表示主节点（leader node）已响应。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，在broker始终有效的情况下，只要设置好重发次数，以及回执，就可以保证kafka已经接收到消息。&lt;/p&gt;

&lt;p&gt;注意，这里只是保证kafka能接收到消息（at-least-once），但没有保证只接受一次（exactly-once）。exactly-once需要设置消息的主键，并保证消息发送的冪等性（即便kafka重启后也能保证）。但这对一个分布式系统来讲并不容易，期待kafka能在未来的版本中实现。&lt;/p&gt;

&lt;h2 id=&#34;对于consumer&#34;&gt;对于Consumer&lt;/h2&gt;

&lt;p&gt;Consumer在实现时需要考虑宕机的情形，即程序重启时能够从上次失败的地方接着处理，而关键就是能够获知已处理的消息的offset。此时有三种选择：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;先保存消息的处理结果，再存offset&lt;/li&gt;
&lt;li&gt;先存offset，再保存消息的处理结果&lt;/li&gt;
&lt;li&gt;将offset保存在消息的处理结果中&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前面两种方法由于存在先后关系，因此可能存在不一致的情形。要么消息可能会多处理几次（at-least-once），要么可能会没有被处理（at-most-once）。
第三种方法则可以保证消息只被处理一次，即exactly-once。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MQ vs RPC</title>
      <link>https://jackeylee007.github.io/post/MQvsRPC/</link>
      <pubDate>Mon, 05 Dec 2016 16:29:06 +0800</pubDate>
      
      <guid>https://jackeylee007.github.io/post/MQvsRPC/</guid>
      <description>

&lt;h1 id=&#34;mq-vs-rpc&#34;&gt;MQ vs RPC&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;消息队列和远程调用&lt;/p&gt;

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h2 id=&#34;架构模型&#34;&gt;架构模型&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://ohpg9orwb.bkt.clouddn.com/blogs/MQvsRPC/RPC.PNG&#34; alt=&#34;RPC&#34; /&gt;
RPC的特点是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;客户端&lt;strong&gt;&lt;em&gt;同步&lt;/em&gt;&lt;/strong&gt;调用服务器上的方法、过程&lt;/li&gt;
&lt;li&gt;客户端的请求只能由&lt;strong&gt;&lt;em&gt;一个&lt;/em&gt;&lt;/strong&gt;服务器处理，虽然请求可以分发到不同的服务器，但一次只能由一个服务器处理&lt;/li&gt;
&lt;li&gt;架构简单、明晰&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://ohpg9orwb.bkt.clouddn.com/blogs/MQvsRPC/MQ.PNG&#34; alt=&#34;MQ&#34; /&gt;
MQ的特点是:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;消息的发送者和消费者解耦，即消息的产生和处理是异步的&lt;/li&gt;
&lt;li&gt;一条消息的消费者可以有多个&lt;/li&gt;
&lt;li&gt;消息可以保存在MQ系统中，消费者可以重新消费&lt;/li&gt;
&lt;li&gt;架构比RPC稍显复杂&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;适用场景&#34;&gt;适用场景&lt;/h2&gt;

&lt;h3 id=&#34;rpc比较适合&#34;&gt;RPC比较适合&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;- 客户端调用哪个服务器比较明确
- 调用需要立即得到返回结果
- 架构简单
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;在一个由多个微服务构成的大系统中，某些&lt;strong&gt;&lt;em&gt;关键&lt;/em&gt;&lt;/strong&gt;服务间的调用应当在较短的时间内返回，而且各个微服务的专业化程度较高，同一个请求的关注者只有一个。这个时候就应该用RPC。
&amp;emsp;&amp;emsp;比如在一个ERP系统中，有一个管理仓储的微服务，以及一个负责订单的微服务。新建订单时需要查知当前的存货是否充足，如果不充足就通知用户；提交订单时预订指定数量的货物，如果此时货物不错，也要终止订单的提交，并通知用户。显然在这种场景下是不允许较大的延迟，否则会影响用户体验。所以应该使用RPC，及时返回仓储情况。&lt;/p&gt;

&lt;h3 id=&#34;mq比较适合&#34;&gt;MQ比较适合&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;- 消息的发送者和消费者需要解耦的情况
    - 发送者并不明确谁是消费者
    - 发送者并不关心谁来消费消息
    - 各个消费者可以从不同的角度入手处理消息
    - 消费者的处理结果也不返回给发送者
- 消息的发送和处理是异步的
- 消息的关注者不止一个
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;在一个由多个微服务构成的大系统中，会有一些非关键服务，用来执行一些不需要立刻得到结果的计算。而且它们的计算结果并不会返回给消息的发送者。这个时候就应该使用MQ。
&amp;emsp;&amp;emsp;比如在一个ERP系统中有一些日志服务、业务监控服务等。这些服务会发布一些系统事件，针对这些事件可能有多个应用关注。对于日志服务，当系统出现某些异常情况时需要浏览日志，查找问题的根源；也可以在分析系统运行的瓶颈时提供关键数据。对于业务监控系统，例如货物入仓出仓的消息，可以被报表系统关注，生成报表；也可以被配货系统关注，及时补足所需库存。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>