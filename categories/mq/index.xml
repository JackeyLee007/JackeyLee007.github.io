<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RocWay的博客</title>
    <link>https://JackeyLee007.github.io/categories/mq/index.xml</link>
    <description>Recent content on RocWay的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-zh</language>
    <copyright>© 2017 Copyright Text</copyright>
    <atom:link href="https://JackeyLee007.github.io/categories/mq/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kafka是如何选择Leader的</title>
      <link>https://jackeylee007.github.io/2016/12/15/kafka_leader_election/</link>
      <pubDate>Thu, 15 Dec 2016 11:22:27 +0800</pubDate>
      
      <guid>https://jackeylee007.github.io/2016/12/15/kafka_leader_election/</guid>
      <description>

&lt;h2 id=&#34;kafka是如何选择leader的&#34;&gt;Kafka是如何选择Leader的&lt;/h2&gt;

&lt;h2 id=&#34;kafka的leader是什么&#34;&gt;Kafka的Leader是什么&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;首先Kafka会将接收到的消息分区（partition），每个主题（topic）的消息有不同的分区。这样一方面消息的存储就不会受到单一服务器存储空间大小的限制，另一方面消息的处理也可以在多个服务器上并行。&lt;br /&gt;
&amp;emsp;&amp;emsp;其次为了保证高可用，每个分区都会有一定数量的副本（replica）。这样如果有部分服务器不可用，副本所在的服务器就会接替上来，保证应用的持续性。&lt;br /&gt;
&lt;img src=&#34;http://kafka.apache.org/0101/images/log_anatomy.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&amp;emsp;&amp;emsp;但是，为了保证较高的处理效率，消息的读写都是在固定的一个副本上完成。这个副本就是所谓的Leader，而其他副本则是Follower。而Follower则会定期地到Leader上同步数据。&lt;/p&gt;

&lt;h2 id=&#34;leader选举&#34;&gt;Leader选举&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;如果某个分区所在的服务器除了问题，不可用，kafka会从该分区的其他的副本中选择一个作为新的Leader。之后所有的读写就会转移到这个新的Leader上。现在的问题是应当选择哪个作为新的Leader。显然，只有那些跟Leader保持同步的Follower才应该被选作新的Leader。&lt;br /&gt;
&amp;emsp;&amp;emsp;Kafka会在Zookeeper上针对每个Topic维护一个称为ISR（in-sync replica，已同步的副本）的集合，该集合中是一些分区的副本。只有当这些副本都跟Leader中的副本同步了之后，kafka才会认为消息已提交，并反馈给消息的生产者。如果这个集合有增减，kafka会更新zookeeper上的记录。&lt;br /&gt;
&amp;emsp;&amp;emsp;如果某个分区的Leader不可用，Kafka就会从ISR集合中选择&lt;strong&gt;&lt;em&gt;一个&lt;/em&gt;&lt;/strong&gt;副本作为新的Leader。&lt;br /&gt;
&amp;emsp;&amp;emsp;显然通过ISR，kafka需要的冗余度较低，可以容忍的失败数比较高。假设某个topic有f+1个副本，kafka可以容忍f个服务器不可用。&lt;/p&gt;

&lt;h2 id=&#34;为什么不用少数服从多数的方法&#34;&gt;为什么不用少数服从多数的方法&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;少数服从多数是一种比较常见的一致性算法和Leader选举法。它的含义是只有超过半数的副本同步了，系统才会认为数据已同步；选择Leader时也是从超过半数的同步的副本中选择。这种算法需要较高的冗余度。譬如只允许一台机器失败，需要有三个副本；而如果只容忍两台机器失败，则需要五个副本。而kafka的ISR集合方法，分别只需要两个和三个副本。&lt;/p&gt;

&lt;h2 id=&#34;如果所有的isr副本都失败了怎么办&#34;&gt;如果所有的ISR副本都失败了怎么办&lt;/h2&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;此时有两种方法可选，一种是等待ISR集合中的副本复活，一种是选择任何一个立即可用的副本，而这个副本不一定是在ISR集合中。这两种方法各有利弊，实际生产中按需选择。&lt;br /&gt;
&amp;emsp;&amp;emsp;如果要等待ISR副本复活，虽然可以保证一致性，但可能需要很长时间。而如果选择立即可用的副本，则很可能该副本并不一致。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>